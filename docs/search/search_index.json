{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sinkmod Documentation Welcome to the documentation for Sinkmod, it's in-game tools, and lua API.","title":"Sinkmod Documentation"},{"location":"#sinkmod-documentation","text":"Welcome to the documentation for Sinkmod, it's in-game tools, and lua API.","title":"Sinkmod Documentation"},{"location":"Lua/actor/","text":"Actor Object The Actor object is returned when you spawn an actor using any spawn functions. It is an array of functions that can be run on the actor to modify or obtain information. Functions Actor Data :GetActorName() Returns the name of the actor. Useful when calling an actor by name or locating it in-game. Transformations :GetTransform() Returns the actor's location, rotation, and scale. :Move(vector Location, bool Sweep, bool Teleport) Moves a spawned actor to a new location. If Sweep is true, the actor will sweep to the new location triggering any collision listener along the path. If Teleport is true, the actor's current physics state and velocity will persist to the new location. :Rotate(vector Rotation) Rotates an actor with the specified pitch, roll, and yaw (X,Y,Z). :Scale(vector Scale) Sets the world scale of the actor to the specified vector. Physics :SetSimulatePhysics(bool Enabled) Sets whether or not the actor should simulate physics. This is the easiest way to freeze an object and prevent it from moving. :GetMassScale() Returns: vector Scale Gets the current mass scale (weight). :SetMassScale(vector Scale) Modifies the mass scale of the actor. Can make it heavier or lighter than the default weight. :GetCollisionEnabled() Returns: bool Enabled Returns whether or not collision is currently enabled on the actor or not. :SetCollisionEnabled(bool Enabled) Sets whether or not collision on the actor is enabled. Warning Setting the collision state of the object to false when unfrozen will cause it to fall through the ground if gravity is not modified. If this not the intended behavior, make sure the object is unable to move before collision is set to false. Otherwise, change the collision type to only collide with the world or other types of objects.","title":"Actor Object"},{"location":"Lua/actor/#actor-object","text":"The Actor object is returned when you spawn an actor using any spawn functions. It is an array of functions that can be run on the actor to modify or obtain information.","title":"Actor Object"},{"location":"Lua/actor/#functions","text":"","title":"Functions"},{"location":"Lua/actor/#actor-data","text":":GetActorName() Returns the name of the actor. Useful when calling an actor by name or locating it in-game.","title":"Actor Data"},{"location":"Lua/actor/#transformations","text":":GetTransform() Returns the actor's location, rotation, and scale. :Move(vector Location, bool Sweep, bool Teleport) Moves a spawned actor to a new location. If Sweep is true, the actor will sweep to the new location triggering any collision listener along the path. If Teleport is true, the actor's current physics state and velocity will persist to the new location. :Rotate(vector Rotation) Rotates an actor with the specified pitch, roll, and yaw (X,Y,Z). :Scale(vector Scale) Sets the world scale of the actor to the specified vector.","title":"Transformations"},{"location":"Lua/actor/#physics","text":":SetSimulatePhysics(bool Enabled) Sets whether or not the actor should simulate physics. This is the easiest way to freeze an object and prevent it from moving. :GetMassScale() Returns: vector Scale Gets the current mass scale (weight). :SetMassScale(vector Scale) Modifies the mass scale of the actor. Can make it heavier or lighter than the default weight. :GetCollisionEnabled() Returns: bool Enabled Returns whether or not collision is currently enabled on the actor or not. :SetCollisionEnabled(bool Enabled) Sets whether or not collision on the actor is enabled. Warning Setting the collision state of the object to false when unfrozen will cause it to fall through the ground if gravity is not modified. If this not the intended behavior, make sure the object is unable to move before collision is set to false. Otherwise, change the collision type to only collide with the world or other types of objects.","title":"Physics"}]}