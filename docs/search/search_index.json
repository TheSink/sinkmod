{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sinkmod Documentation Important The documentation for Sinkmod is still a work-in-progress . Information may change at any moment or be entirely removed. Welcome to the documentation for Sinkmod, it\u2019s in-game tools, and lua API.","title":"Home"},{"location":"#sinkmod-documentation","text":"Important The documentation for Sinkmod is still a work-in-progress . Information may change at any moment or be entirely removed. Welcome to the documentation for Sinkmod, it\u2019s in-game tools, and lua API.","title":"Sinkmod Documentation"},{"location":"Lua_Classes/actor/","text":"Actor Class The Actor class is returned when you spawn an actor using any spawn functions. It is an array of functions that can be run on the actor to modify or obtain information. Functions Actor Data Function Arguments/Returns Description :GetActorName() string Name Returns the name of the specified actor. Useful when calling an actor by name or locating it in-game. Transformations Function Arguments/Returns Description :GetTransform() vector Location vector Rotation vector Scale Returns the location, rotation, and scale of the actor. :Move() vector Location *bool Sweep *bool Teleport Moves a spawned actor to a new location. If sweep is true, collision listeners along the path to the new location will be triggered. If teleport is true, velocity will be preserved to the new location. :Rotate() vector Rotation Rotates and actor with the specified pitch (X), roll (Y), and yaw (Z). :Scale() vector Scale Sets the world scale of the actor to the specified scale. Physics Function Arguments/Returns Description :GetMassScale() vector MassScale Returns the current mass scale (physical weight). :SetMassScale() vector MassScale Sets the mass scale of the actor. Changes the physical weight depending on the supplied MassScale. :GetCollisionEnabled() bool Enabled Returns whether or not collision is currently enabled on the actor. :SetCollisionEnabled() bool Enabled Sets whether or not collision is enabled on the actor. :GetSimulatePhysics() bool Enabled Returns whether or not the object is currently simulating physics or not (frozen). :SetSimulatePhysics() bool Enabled Sets if the actor should simulate physics or not. :GetCollisionChannel() enum ChannelType Gets the collision channel type for the actor (which objects will collide with it). :SetCollisionChannel() enum ChannelType Sets the collision channel type for the actor. Warning If using :SetCollisionEnabled() , make sure the object is frozen unless you want it to fall through the ground. Otherwise, use :SetCollisionChannel() to choose which type of objects to collide with.","title":"Actor Class"},{"location":"Lua_Classes/actor/#actor-class","text":"The Actor class is returned when you spawn an actor using any spawn functions. It is an array of functions that can be run on the actor to modify or obtain information.","title":"Actor Class"},{"location":"Lua_Classes/actor/#functions","text":"","title":"Functions"},{"location":"Lua_Classes/actor/#actor-data","text":"Function Arguments/Returns Description :GetActorName() string Name Returns the name of the specified actor. Useful when calling an actor by name or locating it in-game.","title":"Actor Data"},{"location":"Lua_Classes/actor/#transformations","text":"Function Arguments/Returns Description :GetTransform() vector Location vector Rotation vector Scale Returns the location, rotation, and scale of the actor. :Move() vector Location *bool Sweep *bool Teleport Moves a spawned actor to a new location. If sweep is true, collision listeners along the path to the new location will be triggered. If teleport is true, velocity will be preserved to the new location. :Rotate() vector Rotation Rotates and actor with the specified pitch (X), roll (Y), and yaw (Z). :Scale() vector Scale Sets the world scale of the actor to the specified scale.","title":"Transformations"},{"location":"Lua_Classes/actor/#physics","text":"Function Arguments/Returns Description :GetMassScale() vector MassScale Returns the current mass scale (physical weight). :SetMassScale() vector MassScale Sets the mass scale of the actor. Changes the physical weight depending on the supplied MassScale. :GetCollisionEnabled() bool Enabled Returns whether or not collision is currently enabled on the actor. :SetCollisionEnabled() bool Enabled Sets whether or not collision is enabled on the actor. :GetSimulatePhysics() bool Enabled Returns whether or not the object is currently simulating physics or not (frozen). :SetSimulatePhysics() bool Enabled Sets if the actor should simulate physics or not. :GetCollisionChannel() enum ChannelType Gets the collision channel type for the actor (which objects will collide with it). :SetCollisionChannel() enum ChannelType Sets the collision channel type for the actor. Warning If using :SetCollisionEnabled() , make sure the object is frozen unless you want it to fall through the ground. Otherwise, use :SetCollisionChannel() to choose which type of objects to collide with.","title":"Physics"},{"location":"Lua_Classes/sound/","text":"Sound Class The Sound class is returned when a sound is spawned and has several functions for reading data from and manipulating the sound wave. Functions State Function Arguments/Returns Description :Play() *float StartTime Plays the sound at the specified start time. :Pause() Pauses the sound, allowing it to be resumed at the time it was stopped later. :Stop() Stops the sound, causing it to return to the start position once played again. Properties Function Arguments/Returns Description :GetVolume() float Volume Returns the volume of the sound. :SetVolume() float Volume Sets the volume of the sound.","title":"Sound Class"},{"location":"Lua_Classes/sound/#sound-class","text":"The Sound class is returned when a sound is spawned and has several functions for reading data from and manipulating the sound wave.","title":"Sound Class"},{"location":"Lua_Classes/sound/#functions","text":"","title":"Functions"},{"location":"Lua_Classes/sound/#state","text":"Function Arguments/Returns Description :Play() *float StartTime Plays the sound at the specified start time. :Pause() Pauses the sound, allowing it to be resumed at the time it was stopped later. :Stop() Stops the sound, causing it to return to the start position once played again.","title":"State"},{"location":"Lua_Classes/sound/#properties","text":"Function Arguments/Returns Description :GetVolume() float Volume Returns the volume of the sound. :SetVolume() float Volume Sets the volume of the sound.","title":"Properties"},{"location":"Lua_Examples/crate_random/","text":"Random Crates Information This is a demonstration of the Actor Class and actor spawning . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 --[[ Title: Crate Random Demo Script Author: TheSinkGod Updated: January 22 2020 Description: This example script spawns a specified number of crates randomly around the Flat map. Difficulty: 2 Intended Version: Alpha 1 (Build 100) --]] local amount = 250 local range = 4096 local height = 2000 for i = 1 , amount do local targetActor = SpawnActorFromFile ( \"metalcrate_64x96.obj\" ) local randomNumber = { math.random ( - range , range ), math.random ( - range , range ), height } targetActor : Move ( randomNumber ) end Breakdown Variables are defined for the amount and position of the actors being spawned. A for loop is started with amount as the amount of iterations. Inside this for loop, a new actor is spawned and a random vector is generated in the range of range . Afterwards, the actor is moved to the generated random vector.","title":"Random Crates"},{"location":"Lua_Examples/crate_random/#random-crates","text":"Information This is a demonstration of the Actor Class and actor spawning . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 --[[ Title: Crate Random Demo Script Author: TheSinkGod Updated: January 22 2020 Description: This example script spawns a specified number of crates randomly around the Flat map. Difficulty: 2 Intended Version: Alpha 1 (Build 100) --]] local amount = 250 local range = 4096 local height = 2000 for i = 1 , amount do local targetActor = SpawnActorFromFile ( \"metalcrate_64x96.obj\" ) local randomNumber = { math.random ( - range , range ), math.random ( - range , range ), height } targetActor : Move ( randomNumber ) end","title":"Random Crates"},{"location":"Lua_Examples/crate_random/#breakdown","text":"Variables are defined for the amount and position of the actors being spawned. A for loop is started with amount as the amount of iterations. Inside this for loop, a new actor is spawned and a random vector is generated in the range of range . Afterwards, the actor is moved to the generated random vector.","title":"Breakdown"},{"location":"Lua_Examples/eas_tone/","text":"EAS Tone Information This script is a demonstration of Raw Frequency Generation . 1 2 3 4 5 6 7 8 9 10 11 --[[ Title: EAS Tones Author: TheSinkGod Updated: February 1 2020 Description: This example script generates two overlapping frequencies that generate the attention tone you hear at the beginning of a US emergency alert, for 2 seconds. Difficulty: 1 Intended Version: Alpha 1 (Build 100) --]] PlayRawFrequency ( \"sine\" , 853 , 2000 ) PlayRawFrequency ( \"sine\" , 960 , 2000 ) Breakdown Two functions are ran that play their respective sine waves for 2000 ms (2 seconds).","title":"EAS Tone"},{"location":"Lua_Examples/eas_tone/#eas-tone","text":"Information This script is a demonstration of Raw Frequency Generation . 1 2 3 4 5 6 7 8 9 10 11 --[[ Title: EAS Tones Author: TheSinkGod Updated: February 1 2020 Description: This example script generates two overlapping frequencies that generate the attention tone you hear at the beginning of a US emergency alert, for 2 seconds. Difficulty: 1 Intended Version: Alpha 1 (Build 100) --]] PlayRawFrequency ( \"sine\" , 853 , 2000 ) PlayRawFrequency ( \"sine\" , 960 , 2000 )","title":"EAS Tone"},{"location":"Lua_Examples/eas_tone/#breakdown","text":"Two functions are ran that play their respective sine waves for 2000 ms (2 seconds).","title":"Breakdown"}]}